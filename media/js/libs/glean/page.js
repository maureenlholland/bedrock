/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// AUTOGENERATED BY glean_parser. DO NOT EDIT. DO NOT COMMIT.

import LabeledMetricType from "@mozilla/glean/private/metrics/labeled";
import EventMetricType from "@mozilla/glean/private/metrics/event";
import StringMetricType from "@mozilla/glean/private/metrics/string";
import DatetimeMetricType from "@mozilla/glean/private/metrics/datetime";

/**
 * The time a page was viewed.
 *
 * Generated from `page.viewed`.
 */
export const viewed = new DatetimeMetricType({
    category: "page",
    name: "viewed",
    sendInPings: ["interaction", "non-interaction", "page-view"],
    lifetime: "application",
    disabled: false,
}, "millisecond");

/**
 * The URL path of the page that was viewed, excluding locale.
 *
 * Generated from `page.path`.
 */
export const path = new StringMetricType({
    category: "page",
    name: "path",
    sendInPings: ["interaction", "non-interaction", "page-view"],
    lifetime: "application",
    disabled: false,
});

/**
 * The locale of the page that was viewed.
 *
 * Generated from `page.locale`.
 */
export const locale = new StringMetricType({
    category: "page",
    name: "locale",
    sendInPings: ["interaction", "non-interaction", "page-view"],
    lifetime: "application",
    disabled: false,
});

/**
 * Query parameters associated with the URL of
 * the page that was viewed.
 *
 * Generated from `page.query_params`.
 */
export const queryParams = new LabeledMetricType({
    category: "page",
    name: "query_params",
    sendInPings: ["interaction", "non-interaction", "page-view"],
    lifetime: "application",
    disabled: false,
}, StringMetricType, ["entrypoing_variation", "entrypoint_experiment", "experiment", "utm_campaign", "utm_content", "utm_medium", "utm_source", "v", "variation", "xv"]);

/**
 * The referring URL that linked to the page that was viewed.
 *
 * Generated from `page.referrer`.
 */
export const referrer = new StringMetricType({
    category: "page",
    name: "referrer",
    sendInPings: ["interaction", "non-interaction", "page-view"],
    lifetime: "application",
    disabled: false,
});

/**
 * An event containing metrics related to a page level
 * completion or state that want to measure. This can be
 * sent in either an interaction and non-interaction ping,
 * depending upon the use-case. Examples: form completion,
 * scroll events, banner impressions.
 *
 * Generated from `page.page_event`.
 */
export const pageEvent = new EventMetricType({
    category: "page",
    name: "page_event",
    sendInPings: ["interaction", "non-interaction"],
    lifetime: "ping",
    disabled: false,
}, ["label", "type"]);


